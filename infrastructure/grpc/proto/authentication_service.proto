syntax = "proto3";

option go_package = "github.com/XWS-BSEP-Tim-13/Dislinkt_AuthenticationService/infrastructure/grpc/proto";

package post;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

service AuthenticationService{
  rpc Login(LoginRequest) returns(Token) {
    option (google.api.http) = {
      post: "/login"
      body: "credentials"
    };
  }
  rpc Register(RegisterRequest) returns(RegisterResponse) {
    option (google.api.http) = {
      post: "/register"
      body: "user"
    };
  }
  rpc IsAuthorized(AuthorizationRequest) returns(AuthorizationResponse) {
    option (google.api.http) = {
      post: "/is-authorized"
      body: "token"
    };
  }

  rpc ForgotPassword(ForgotPasswordRequest) returns(AuthorizationResponse) {
    option (google.api.http) = {
      post: "/forgot-password"
      body: "email"
    };
  }

  rpc ChangePassword(ForgotPasswordRequest) returns(AuthorizationResponse) {
    option (google.api.http) = {
      post: "/change-password"
      body: "email"
    };
  }

  rpc GenerateCode(GenerateCodeRequest) returns(GenerateCodeResponse) {
    option (google.api.http) = {
      post: "/generate-code"
      body: "passwordlessCredentials"
    };
  }
}
message ForgotPasswordRequest{
  string email = 1;
}

message Credentials {
  string username = 1;
  string password = 2;
}

message User {
  string username = 1;
  string password = 2;
  string role = 3;
  string email = 4;
}

message Token {
  string role        = 1;
  string username    = 2;
  string token = 3;
}

message PasswordlessCredentials {
  string email = 1;
  string code = 2;
  google.protobuf.Timestamp expiringDate = 3;
}

message PasswordlessCredentialsEmail {
  string email = 1;
}

message LoginRequest {
  Credentials credentials = 1;
}

message RegisterRequest {
  User user = 1;
}

message RegisterResponse {
  string username = 1;
}

message AuthorizationRequest {
  Token token = 1;
}

message AuthorizationResponse {
}

message GenerateCodeRequest {
  PasswordlessCredentialsEmail passwordlessCredentials = 1;
}

message GenerateCodeResponse {
  PasswordlessCredentials passwordlessCredentials = 1;
}
